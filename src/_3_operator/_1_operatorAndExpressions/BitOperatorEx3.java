package _3_operator._1_operatorAndExpressions;

// 비트 이동(shift) 연산자: 비트 단위로 연산하므로 float, double 은 할 수 없다.
//                      피연산자를 int 타입으로 자동 타입 변환한 후 연산을 수행한다.
// -------------------------------------------------------------------------------
// 연산식          설명
// -------------------------------------------------------------------------------
// a << b   정수 a의 각 비트를 b만큼 왼쪽으로 이동 (빈자리는 0으로 채워진다.)
// a >> b   정수 a의 각 비트를 b만큼 오른쪽으로 이동 (빈자리는 정수 a의 최상위 부호 비트(MSB)와 같은 값으로 채워진다.)
// a >>> b  정수 a의 각 비트를 b만큼 오른쪽으로 이동 (빈자리는 0으로 채워진다.)
public class BitOperatorEx3 {
    public static void main(String[] args) {
        // &&는 첫번째가 false 면 종료인데 &는 다 계산하므로 &&가 더 효율적이다.
        System.out.println("45 & 25: " + (45 & 25));

        // 정수 1을 3비트만큼 왼쪽으로 이동
        System.out.println("1 << 3: " + (1 << 3));
        System.out.println("-2 >> 3: " + (-2 >> 3));
        System.out.println("-1 >>> 3: " + (-1 >>> 3));
    }
}
