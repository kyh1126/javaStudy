package _8_interface._1_interface;

// 인터페이스(interface): 객체의 사용 방법을 정의한 타입. 객체의 교환성을 높여주기 때문에 다형성을 구현하는 매우 중요한 역할을 한다.
//                      자바 8에서 인터페이스의 중요성은 더욱 커졌다. 자바 8의 람다식은 함수적 인터페이스의 구현 객체를 생성하기 때문이다.
//                      개발 코드가 인터페이스의 메소드를 호출하면 인터페이스는 객체의 메소드를 호출시킨다.
//                      그렇기 때문에 개발 코드는 객체의 내부 구조를 알 필요가 없고 인터페이스의 메소드만 알고 있으면 된다.
//                      개발 코드를 수정하지 않고, 사용하는 객체를 변경할 수 있도록 한다.
//                      개발 코드 측면에서는 코드 변경 없이 실행 내용과 리턴값을 다양화할 수 있다.
//                      클래스는 필드, 생성자, 메소드를 구성 멤버로 가지는데, 인터페이스는 상수와 메소드만을 구성 멤버로 가진다.
//                      인터페이스는 객체로 생성할 수 없기 때문에 생성자를 가질 수 없다.
//                      자바 7 이전까지는 인터페이스의 메소드는 실행 블록이 없는 추상 메소드로만 선언이 가능했지만,
//                      자바 8부터는 디폴트 메소드와 정적 메소드도 선언이 가능하다.
public class InterfaceEx1 {
    public static void main(String[] args) {
        // 인터페이스로 구현 객체 사용하려면 다음과 같이 인터페이스 변수에 대입해서 사용해야 한다.
        // 인터페이스 변수는 참조 타입이기 때문에 구현 객체의 번지를 저장한다.
        RemoteControl rc;
        rc = new Tv();
        rc = new Audio();
    }
}
