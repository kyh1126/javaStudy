package _12_multiThread._3_threadState;

// 스레드 상태: 스레드 객체를 생성하고, start() 메소드를 호출하면 곧바로 스레드가 실행되지 않고 실행 대기 상태가 된다.
// 1. 실행 대기 상태: 아직 스케줄링이 되지 않아서 실행을 기다리고 있는 상태.
// 2. 실행(Running) 상태: 실행 대기 상태에 있는 스레드 중 스레드 스케줄링으로 선택된 스레드가 CPU 를 점유하고 run()메소드를 실행한다.

// 실행 상태의 스레드는 run() 메소드를 모두 실행하기 전에 스레드 스케줄링에 의해 다시 실행 대기 상태로 돌아갈 수 있다.
// 그리고 실행 대기 상태에 있는 다른 스레드가 선택되어 실행 상태가 된다. 이렇게 스레드는 실행 대기 상태, 실행 상태를 번갈아가면서 run() 메소드를 조금씩 실행한다.

// 3. 종료 상태: 실행 상태에서 run() 메소드가 종료되면, 더 이상 실행할 코드가 없기 때문에 스레드의 실행은 멈추게 된다.

// 실행 상태에서 실행 대기 상태가 아닌 일시 정지 상태로 가기도 한다. 다시 실행 상태로 가기 위해서는 일시 정지 상태에서 실행 대기 상태로 가야한다.
// 4. 일시 정지 상태: 스레드가 실행할 수 없는 상태. WAITING, TIMED_WAITING, BLOCKED.

// 자바 5부터 Thread 클래스에 getState() 메소드가 추가되었다. Thread.State 열거 상수를 리턴.
// -------------------------------------------------------------------------------
// 상태       열거 상수           설명
// -------------------------------------------------------------------------------
// 객체 생성    NEW             스레드 객체가 생성, 아직 start() 메소드가 호출되지 않은 상태
// -------------------------------------------------------------------------------
// 실행 대기    RUNNABLE        실행 상태로 언제든지 갈 수 있는 상태
// -------------------------------------------------------------------------------
// 일시 정지    WAITING         다른 스레드가 통지할 때까지 기다리는 상태
//            TIMED_WAITING   주어진 시간 동안 기다리는 상태
//            BLOCKED         사용하고자 하는 객체의 락이 풀릴 때까지 기다리는 상태
// -------------------------------------------------------------------------------
// 종료        TERMINATED      실행을 마친 상태
// -------------------------------------------------------------------------------
public class ThreadStateEx1 {
    public static void main(String[] args) {
        StatePrintThread thread = new StatePrintThread(new TargetThread());
        thread.start();
    }
}
