package _5_referenceType._1_dataTypeAndMemory;

// 데이터 타입 (Data Type)
// -------------------------------------------------------------------------------
// 기본 타입 (Primitive Type): 실제 값을 변수에 저장.
// 1-1. 정수 타입 : byte char short int long
// 1-2. 실수 타입 : float double
// 1-3. 논리 타입 : boolean
// -------------------------------------------------------------------------------
// 참조 타입 (Reference Type): 메모리의 번지를 값으로 저장. 번지를 통해 객체를 참조한다.
// 2-1. 배열 타입
// 2-2. 열거 타입
// 2-3. 클래스
// 2-4. 인터페이스
// -------------------------------------------------------------------------------

// 메모리 사용 영역: java.exe 로 JVM 이 시작되면 OS 에서 할당받은 메모리 영역(Runtime Data Area)을 다음과 같이 구분해서 사용한다.
// -------------------------------------------------------------------------------
// Runtime Data Area
// -------------------------------------------------------------------------------
//          1. Method Area -   Class1...n      -   런타임 상수풀(runtime constant pool)
//                                             -   필드/메소드 데이터(field, method)
//                                             -   메소드 코드
//                                             -   생성자 코드(constructor)
//          2. Heap Area   -   객체, 배열1..n
//          3. Thread1..n  -   JVM 스택(Stack)  -   push -> 프레임(변수1..n)1..n -> pop
// -------------------------------------------------------------------------------
// 1. 메소드 영역:  코드에서 사용되는 클래스(~.class)들을 클래스 로더로 읽어 클래스별로 런타임 상수풀, 필드 데이터, 메소드 데이터, 메소드 코드, 생성자 코드
//               등을 분류해서 저장한다. 메소드 영역은 JVM 이 시작할 때 생성되고 모든 스레드가 공유하는 영역이다.
//               메소드 코드나, 상수, 열거 상수는 정적(메소드) 영역에 생성된다.
// 2. 힙 영역:     객체와 배열이 생성되는 영역. JVM 스택 영역의 변수나 다른 객체의 필드에서 참조한다. 참조하는 변수나 필드가 없으면 가비지 컬렉터를 실행시켜
//               자동으로 제거한다. 자바는 코드로 객체를 직접 제거시키는 방법을 제공하지 않는다.
// 3. 스택 영역:    각 스레드마다 하나씩 존재하며 스레드가 시작될 때 할당된다. 추가적으로 스레드 생성하지 않으면 main 스레드만 존재하므로 스택도 하나이다.
//               스택은 메소드를 호출할 때마다 프레임(Frame)을 추가(push)하고 메소드가 종료되면 제거(pop)한다. 예외 발생 시 printStackTrace()로
//               보여주는 Stack Trace 의 각 라인은 하나의 프레임을 표현한다.
//               프레임 내부에는 로컬 변수 스택이 있는데, 기본 타입 변수와 참조 타입 변수가 추가(push)되거나 제거(pop)된다. 변수가 이 영역에 생성되는
//               시점은 초기화가 될 때, 즉 최초로 변수에 값이 저장될 때이다. 변수는 선언된 블록 안에서만 스택에 존재하고 블록을 벗어나면 제거된다.
//               참고로 자바에서는 배열을 객체로 취급한다.

// == !=: 기본 타입 변수의 연산은 변수의 값이 같은지 아닌지를 조사하지만 참조 타입 변수들 간의 연산은 동일한 객체를 참조하는지 아닌지 알아볼 때 사용.
//        참조 타입 변수의 값은 힙 영역의 객체 주소이므로 주소 값을 비교하는 것이 된다.
public class DataTypeEx1 {
    public static void main(String[] args) {
        // 참조 타입 변수는 값이 아니라 힙 영역이나 메소드 영역의 객체 주소를 가진다.
        int[] scores = {10, 20, 30};
        System.out.println(scores.toString());
    }
}
