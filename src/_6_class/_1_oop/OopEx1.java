package _6_class._1_oop;

// 객체: 필드, 메소드 같은 자신의 속성을 지닌 식별 가능한 것.
// 메소드: 객체들 사이의 상호작용 수단.
// OOP 의 특징
// 1. 캡슐화(Encapsulation): 객체의 필드, 메소드를 하나로 묶고, 실제 구현 내용을 감추는 것.
//                          외부 객체는 객체 내부의 구조를 알지 못하며 객체가 노출해서 제공하는 필드와 메소드만 이용할 수 있다.
//                          외부의 잘못된 사용으로 인해 객체가 손상되지 않도록 한다.
//                          자바 언어는 접근 제한자를 통하여 객체의 필드와 메소드의 사용 범위를 제한함으로써 외부로부터 보호한다.
// 2. 상속(Inheritance): 상위 객체는 자기가 가지고 있는 필드와 메소드를 하위 객체에게 물려주어 하위 객체가 사용할 수 있도록 해준다.
// 3. 다형성(Polymorphism): 같은 타입이지만, 실행 결과가 다양한 객체를 이용할 수 있는 성질을 말한다.
//                         하나의 타입에 여러 객체를 대입함으로써 다양한 기능을 이용할 수 있도록 해준다.
//                         이를 위하여 자바는 부모 클래스 또는 인터페이스의 타입 변환을 허용한다.
//                         부모 타입에는 모든 자식 객체가 대입될 수 있고, 인터페이스 타입에는 모든 구현 객체가 대입될 수 있다.
public class OopEx1 {
}
